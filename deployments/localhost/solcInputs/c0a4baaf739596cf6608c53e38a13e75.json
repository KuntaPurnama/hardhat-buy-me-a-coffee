{
  "language": "Solidity",
  "sources": {
    "contracts/BuyMeACoffee.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract BuyMeACoffee {\r\n    //Error \r\n    error BuyMeACoffee_TransferFailed();\r\n\r\n\r\n    //Event to emit when memo is created\r\n    event NewMemo( address indexed from,\r\n        uint256 timeStamp,\r\n        string name,\r\n        string message);\r\n\r\n    //Memo Struct\r\n    struct Memo{\r\n        address from;\r\n        uint256 timeStamp;\r\n        string name;\r\n        string message;\r\n    }\r\n\r\n    //list of memos\r\n    Memo[] memos;\r\n\r\n    // Address  of contract  deployer\r\n    address payable owner;\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev buy me a coffee contract owner\r\n     * @param _name name of coffee buyer\r\n     * @param _message message from coffee buyer to deployer\r\n     */\r\n    function buyCoffee(string memory _name, string memory _message) public payable{\r\n        require(msg.value > 0, \"can't buy coffee with 0 eth\");\r\n\r\n        //add memo to storage\r\n        memos.push(Memo(msg.sender, block.timestamp, _name, _message));\r\n\r\n        //emit log event when memo is created\r\n        emit NewMemo(msg.sender, block.timestamp, _name, _message);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw to tips to deployer\r\n     */\r\n    function withdrawTips() public {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev get and show memo on blockchain\r\n     */\r\n    function getMemo() public view returns(Memo[] memory){\r\n        return memos;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}